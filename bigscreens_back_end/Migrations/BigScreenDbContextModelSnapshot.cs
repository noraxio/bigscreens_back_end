// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bigscreens_back_end.Data;

#nullable disable

namespace bigscreens_back_end.Migrations
{
    [DbContext(typeof(BigScreenDbContext))]
    partial class BigScreenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("bigscreens_back_end.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PgLevel")
                        .HasColumnType("int");

                    b.Property<string>("PlotSummery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("RunTime")
                        .HasColumnType("int");

                    b.Property<int?>("ShowingId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShowingId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Reservedseat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Seatnummber")
                        .HasColumnType("int");

                    b.Property<int?>("ShowingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShowingId");

                    b.ToTable("Reservedseat");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Showing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ShowingTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Showings");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Showroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ScreenSize")
                        .HasColumnType("int");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Showroom");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Soldseat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SeatNummber")
                        .HasColumnType("int");

                    b.Property<int?>("ShowingId")
                        .HasColumnType("int");

                    b.Property<int>("TicketNummber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShowingId");

                    b.ToTable("Soldseat");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phonenummber")
                        .HasColumnType("int");

                    b.Property<int?>("SoldseatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoldseatId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("ShowingShowroom", b =>
                {
                    b.Property<int>("ShowroomsId")
                        .HasColumnType("int");

                    b.Property<int>("ShowsId")
                        .HasColumnType("int");

                    b.HasKey("ShowroomsId", "ShowsId");

                    b.HasIndex("ShowsId");

                    b.ToTable("ShowingShowroom");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Movie", b =>
                {
                    b.HasOne("bigscreens_back_end.Models.Showing", null)
                        .WithMany("Movies")
                        .HasForeignKey("ShowingId");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Reservedseat", b =>
                {
                    b.HasOne("bigscreens_back_end.Models.Showing", null)
                        .WithMany("Reservedseats")
                        .HasForeignKey("ShowingId");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Soldseat", b =>
                {
                    b.HasOne("bigscreens_back_end.Models.Showing", null)
                        .WithMany("Soldseats")
                        .HasForeignKey("ShowingId");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.UserAccount", b =>
                {
                    b.HasOne("bigscreens_back_end.Models.Soldseat", null)
                        .WithMany("UserAccounts")
                        .HasForeignKey("SoldseatId");
                });

            modelBuilder.Entity("ShowingShowroom", b =>
                {
                    b.HasOne("bigscreens_back_end.Models.Showroom", null)
                        .WithMany()
                        .HasForeignKey("ShowroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bigscreens_back_end.Models.Showing", null)
                        .WithMany()
                        .HasForeignKey("ShowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Showing", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Reservedseats");

                    b.Navigation("Soldseats");
                });

            modelBuilder.Entity("bigscreens_back_end.Models.Soldseat", b =>
                {
                    b.Navigation("UserAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
